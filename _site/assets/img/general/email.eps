%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14 (Build 18A391) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 174 174
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 174 174
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: SXWCPY+GTHaptikTrial-Regular
%!FontType1-1.0: SXWCPY+GTHaptikTrial-Regular 003.001%%CreationDate: 12/14/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (003.001) readonly def/FullName (GT Haptik Trial Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /SXWCPY+GTHaptikTrial-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /e putdup 34 /m putdup 35 /a putdup 36 /i putdup 37 /l putdup 38 /space putreadonly def/FontBBox {-31 -213 1290 928} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF1D53D6B954A9E944DA59A7A62835797869695FE924E432D86EB156989CCF0E0C09A8DF86B4E926CD30EA55492A13771C7680F36769CDC0EA7E77DACADC4166AC268825F41D963C2C5A42F3990BEE19F9DC59754267243B3324072B08696CF43342C9ACD9EAEFDC6BB1899F936BE84F3EF46F618730AA34C88AF451FFD371C2DA091F4DB83744CD8FD580E01E10C64390B46DB2253FF72CB2BE998C606618E769019C772C3FB3CCCD2C38A1C0C39BD587C60C355ECAFB70352477F7F90C475E3F44D40FCF177DACCEA3D8B6C49D8E693DAA5430C90AA5A1D46489357BDA38EF2398159CB234CC29E2BAFBFD948924219C712D59461B64C6A23014129D79D3A1851B4116DC9D04B5AB231F2F474B9C85D37CACF339FEC72EA99F495B9832C0E747A58A0973BEADD62B9090AFBFD7C697C31D472DC308BEF7A6D651AB727DFF6F149941E6DAB5DC2A1381C677F38191CCF34550DC70F40F8911D6371221660E57376D055B1ED0334B403BE544BD84BE92D530FE319261E9D927931EA478ED528DA65D427C3B7D78E1FB5135B0DF981CF58589AD54166638C75F30120A76B98950551DF007A27B54E3856FCA5A696DDD4FE8965650497AF00E5A31509A34FF07B20575D386AC55573A4B4E820C5F525EC2F1DD41F02A7EE3A1114925AC1235A092C1F07B61A8B07DBF42C4F5F309AB4FED25790AB90A5915FFDF50B2F08711C5A8460D705E81D47B3936C22C78E2E74F26DE9CC81F11AC5A046DA214C9866726CC49067D3D5AB80C5B5FDB9D73B91BCAAC0D833456617C2E22BE2470987BA57CF5DE767A6E7F23C40E668D24ABD138B4A0C89DB733F29F357B9B58EA47A9400D028B8BFFE74BAFC43E888AD56DCF5600C5D557F389516AEC98E0BB1CBA83E55F8C6B6643526F1BB7259DBE1498F9F9945DF40FA684BB805D3A0C60462F14B35203300AB80C3B1245E00027089FA4530AD2E7079E6D2D06B4D7528BCA6B8DAFFFE0535C51E3A1F3713E5D1E0E75081CFA2D151A81657FC8CD0A8B6761E39990262FD4170CADFBA196A54BB6C642C99735621F710CDE39F073217D2D348F7CB908C9387C8B7A0C52169A3637988BB7D4AACE67CF13234F25DB9B96F2288DEA2A787127DFB16A31096D260D2C798F4704374F02598019B1228DE365756C00F955B57E78B68251E5517671321C3DC59D13D4D0B8502A1E97F977A1A866521905707501C678B4C298B97243530252F91D22490FB2A3DDC59EAE0EFDAA008B35BF098590E3A3A80ADE8937E6F3D5178D6258B7F26998ACD670A237C1D403C3627941542B8E538DD6C21E5941796A734B47EDDE50B7CC480D850C10963689F53708A4EDFF784A481616E969C253D3D95A641F0871A9A797A0DE04C274F514E8EDE1E3876B34E72A60A045458907435FA384EC7A3EE7EF6006A9DBBBDE974D2BF32968AD5AD467FF552E6522F8E9D024C5827C7F8B30D90B742E0426AC890950C1CEA9D6855BCB9AE6F08AA86CB103C73CB3C1F9E1AF54E72EDC1E97CB0FD26EE3A180DFC9128F57615101146DBCB9D42157BFA08A3EBFCE168A7110EE0747FDFFF2C663E24C764DC432818363356B857CBE4253332503AB3BBD203E2251C346E39B0D90AE2746EDBDB67EBE121D0CBC9F0BE9AA8D6308BA2BDBF79E06DCFFCD13B8FB99A8322B6A53A24A1CC0E555008E9AF2577FE413CDD1B7A58967B21D629298D0452701A3998A123526B410051DA59CC34A2C337821A6330DDC184A7B4D4A7FF7AD83AE23504A5D5FB36FB96E418D7B727A00059A014101495EEC1AC540F23C41CD84287B9978C47A468552C2F8C9B249026189A89A9B624BC16892E8C9DA685931DC23C8C1DA00FAC9A0369455DA6C7910789502551B59E1D21D80349482E1BB5A336500AFB493E8C35B80094472D0FC042BB345DE19A385223C999C806ABAB9D4A4271C0BBF488426E8CFAD51D058934B0CE0214FFEFD3A0ED9357D6D2426CAD83E0078803E9943C176102056B6A21EB809FE69C9945D2C4C6A2BAF3A5061A181A3ECBA1741B544B32B2BA36BC597D3219D1480867D0667B6576B16A51A1EE12E569A00026BAB2DBBCD5165860CC3C5EFF83FB5599A9E11C5C5AECA42035749FAB7BD422CA40D34B20975A8AE3D7546B23B2A5C648BFAE8F38BDD9AEC98F06D5920DCFBA11C8FFBFEE196C8B8760B4CB9BB5C4F3B42DC62F41FDB0FAF434F5310A66FD3C913C19EA43A1A7F1B63211790F294D6AE7B56762FA04884BCD5784EFCE9DB1814963235EC7B00B8EEF736FA19D1434F5B5B21FA47FC93B0147C152CC6AD5982250A0A7F28A785EB427FF1C56D14520FC083F6F379EB4087E337C6158CD9A3B16249669C2D403F92F2F3971D726EA7B060F3F9734BB1271DD66C58970EFDC4799F6874024CD758BF03A0A3A1C75A435258357C34FFE3E6F607197C6A4E61292B3C2B9A05A176D3E5F720A6F394E494A955884CDFF925EC104C6AC457C554E31912B53B2A953B04872E456436912C259FBF02E1C459E7F8ADB0B0722C5E343D0153C98D65330635FFBE2C421A068394DF0B515D4BAF351AF8755503499D279258958125A5C2761570707955669B51DF41CD6710BF9B68B3AD9524D39D6B61BBDCBB354CBBCE988C27D1EDFC52713A301A5B2C4610148F04B117C44C61269496D6B0EF268891CDD441D0415E895C7BAC0ABB302762E8934277914EC134EF1229F1AFFF42567056ECA94DF42751756548192939E2D13229901D40141FC52DBCAC10D5A2E2CE0A69E8A91F49BE345B6BA6F4897E31072F79AA7DDE9EC68903827BE67C8564BAC47D58F4DDA99B90E05E2D8DD881F476F5BF67866898840608EFC3CEB5E4E8FF5643D6C7B8A676DF9FF116B90816A374EBE49C9DAEAE4C3BB71A9BC228AFB1C1AAF37484BDD05F6D43A396179D80F59FD7E1FD9798A8D5457401445D53E7DE4AEB8D7049440D7B65D983D34C22031448D89509F760F570F2AAE173C3C9E8EB5218CD15CF38594F27DB3F046DCCE06C5D3E7C71D9EB3A89E8AB4E827062270FCFF53A315245B5241C405A7FBE8A298DBAB290D2767FA04DCCC61F820F372DACA2BACB9922E464BD3A4B9753DB6B7770B4BB5167CD09F876DB5D743DA9F09B9E79AF7D12365F064A2EB85D983BB6309833D7107329E162563D333D5AB2FC2C2954BD975C7F9A0D73D4D95546A9AC55E4C6AF770E2BDD4C197BFCCC89B1C70EF2FA3258DABA2B01F17719DA09827EDD29A1B917AD168D67673DEBD7E151422CF1A195DD4B7DA13AA634014593E027B5CECFBF7EE2B403A026E1E30060AF44C16F8FBD293B96DF8E90DF1B5EB834F6A2A6EA917803A20E5510F86D1057764C32D7F4393808309DA36BBB513A1BDC0B29C2D3A642D4BE086131F7290369329C8EA36F556FE864106101532B72AD1E468ABB9308EE3ECF8973E11459BCAE9DF987F2DB7DF0937043431ACACCD32F9298076B85A6B03C7CFDF64387170F9E88B211DC37463258BE42CF76249726003503F3B2A09BEF48B23680192B5224530E961C6B486B8123A1CF799E488376A34122FC1C527FCDE3A97D9E41D22B74D2976974CCEF16E43DE76EB235F9345F69BBE20EFFD2D8C92C02E649AA109F63C0FF8AC6C3208271222C5AFF1075BE31621903F5AED03B3477AFE7045562F3977B601F1E8512FD73EBCB3A00429F3747DCC7A8D7CB1FA95DA5FE66C32737BD33F764A57FC211B846E9529686F3E4A1DD74143AC37B6A0194592E6C61D5BDFD6533A3FDA86971463A9079C0FD91807BB69294CA010EAF3E0182635259942158F6A1A6F24FF1C0772505FC0BD46E45071E9E52D8A2A06EE37B9B6B8CEA678C4C47FB9FC147641E8549FDF9480B7DE9026F5487F36847240AD7327EBF8A1BA3C0C245F44B07F483D0EB2E3EC2AD3707D851168FB492C825390C7BA3BF5C9BCDE89F7886B6DA1F97F8603085610A5997BA690C7E3D32775DE16DD8BE464F8689BB52BAA112AB441BAA02DF386748CEBEDCC6C4FCB87A60F1B26FB53826495E09D3E6FF8E4E570753983AA8101DF4811DFDD4662A1947643AAC6CB0A31FAB71DD84DD23374910F82F4EAF6319C533B4F23C606C68F0877205AF3B7046FF79675E0D7FBA03902D328862F837A5684861BDBE614F74EA379141E7A965AAFA60061969D137EC92395A1804A82DE5716377B77D50C59AC94B9BBDB2C89F5DF303BAF132DF7B63438A64B0D739039ECEC38FD0955342E28FCD6A20B522B7B61435CA4FF59BCBB2A06A887E9DA05E6DA165AC14D1CCA7C1404F98614D7987D01FC21F6F87C8FBF5F3F2A2418B3812C0402D77E8D4F77F56468C8EE1ECD7E6DEA1A7A01093FB75CEC4D3BE34FFB49BFF9F726D998B22C4ECD9F29C277C6188523AB3EDBAD6891623D817150DDF42955710C6869FF06E6AD5B3DD645A817D817CAD6E0C73103460BE628E97FDE133ED7F85F8F3D84EB13A8975B0CC0770313EB4CC5F5DF2866934FAAF38DDBA281A127ABB0B00EBD391259174FA1A5AF8A2AE66FF05FCDD292DAF0A31E833B3BC1D4D80C5108BA3BAC8C365D680826F5C64D6EE9DAC2A5E98454FC93B166721AAA0A3C6074EF668BC74F3A9C61F83F6E1AB811FCD78E2C78C275E60C2838679BD803DA8F9B6188A4B6C24A846531494FF7B926CD1AFBBE924CDBA7F63F30D08C69409B960AB1567CD3BD38882989F494221BD89518ECACF1B33182C1BC361447CF128834D512DC559AA33AFA7653D99C7A40595C1FA9F7BD82FF60DDFFDFC57D879C20D08419A732B0390D427292166B2D8E50043AB027DF7B87313A938390175DCFDBFCFA657BDCEC1C8E1C00545441E53C4D8911F7011742812A669BF5D65818A392AF7DFD236389D40FE62621C3A96ECB645EFC6B8BF795DC1B9882527BF579A8511AD90EE25787E2B47A0AD59E75E0817F4D4BC4DC77241A1CC0139B2AF84C627B29D5E76B0B38E2CAE5605E7710C1B0A5E3FE8433012D6737F627C3146625635136B7FF7810C93F8427A18CBBE9D9DFC2510705B73A2F88A038D7241273606F853CAF9391828068BC946B39969AFEF7AC18F264A017826675ECA809088A70A6468ED861258FC175529F0E4E28F300EC07D449AAA8B99E2AB76C5B8BF471CFC3334727FB5FA2073BF058D0F6788D4E93ED8ADE1CED1E1AA229D76BA6BDE66BEFAF938BCB2970BF7E74BC999FE3BDEDF052BECF213CBD41D6AF0D63E34F9D5CE22BC3BA3F6256A099296948EC2C241C578B93CC1C2F03F6D117829D5F46522F2BDDD09BEAF4B4EF3E6D3FA65F7FA622F6B6665721D8150937CC74B8B78A90151CB06B5D71427C82821C1EB7388EE07112F15B0D4F545EA0A15867DC5C94991971107DE4D05D99D9154A86CD3B4EEC7580EA4A295D9A123F6A3FBE1DF1E86A6FCCD5E102461AC9BBA8DA200AD2AB96D437CDECB7D87EB93317E7867AE02884276703BA2646CD8721CEB99DA8F9EB54B692E50D96F9FA9BCA61650B5923539B2F682ED4DEA25E6F721F9B2436DBB602DD6CC8D648392EBCCDA60F64D4B69B7A8DF9C2C2F92AEA7394DAD17DA0CD470EAD9196E829B3307EEB25D987EF93FDC7F1B19D28F411FC89DC7BFCDA74FAC79792C8604AE120CAD9166221BC5AA9FE5FE4BFAC045A5A89BF2F60A4448D063DA36D91A27E229FECF9B76D717D0974C66D2F518ED9A526F4A307301F4A05A9BF2CDC850F2EB0CD7DFBE269C5F2F741469AB47FD7EDFDBDB4725F3FDE312FBC7CB7C8E0360B8E1B46EA68FCC1D0CCB839E97266A211D2DEE787447C93442EDAEFA4F98F604DEFA75B37690D0F87D9CF506273E9CE19A4C554EA09954ECD267771C2CAA6AB1900A6D60177535274C9EDF7CEDBB5726E066281AE744F78B2CD9E9E598FBC280DA3BAE48802118F54129981B270A6A3ECFF6D1657F10B036B6A5DA1796358E117B4F6668F03EFC3F6B5545755BB1051B47E10337BC391E6DF2B4A830C51E3D3276138A38A6ACCE249D33B2C681079C7755BE2798FF482F71AE0A9989260B1FB61426235A6C4A2992F18B1005D55B202098A537A897B672DD9E79166AF1F404AA39CD5BFC85D1DE380F29218A26193A7DF2B92E75107ECF02983C493DDD5FE99FB9A5B00E07B8EE97D479ECCBF25505C3203B06F8FBAA0F3F9AE216F404339BC008FF40E947F2DB7DF549B27A49B0537D87CCFA5457B2AF3128EA83439C194BA13C34B0618EB67D5A15A2182460F267E94E1A4EC5F9B64B4DACE1C739F173DDAC13F592B7444FF71D2466FB9B74C315C5134336757536690A73536198183436F653895D548EE4802CA006200309C11EB365D4114A00C527FC45D23C7C0B3A89701227E77BE1A732D013ABF0CBAD09A17D9C7320F922E15B47BF1F6B2E864FAA122B1D7F57D1CAEDCAD21E0A3E28A57C4124DFB58DC36686331B374FB7D7B721C38390616064179BF0D354B249861D642397D05693166CABD2ED7EB7292A9B7398ED797F4EFBBA8CDED436BCF90DD796355C43BC05F8C548A25D98D12BE4B81C561B850B602BDE0151A08A5D62F62B8918CE5A51D265D091712F7D12DDC7506655B402F8DCA937EEBD9A2EA7651BBB96EBD83F5356A26E1CCE0CEB58E3C33FB859AA9EEE19811CE1419CEE0A0CD98AB30BCB83B932C076FA9174BB9B52FAC7D26421C54A4A5E3295EF9D3A2639835FA98DA732D1BF555648CAF6A154B8D23DC03A7D51AB4DBD5C07F110E50258A008144EBE2B343E24B437F6EDCEB171F3CCDAA90BBDAA034ABE6902A6BACCD51D3553D764C99471693E6E872B452AAC8D970460D881D58F14C45852F7C00B1D708D2FC31D547AE7E75D9D9BBC0ABE5C2CEFE5DF11686CB037DEFAE9109ABBB0AB8407EFD3A81C8A606B8B9EBA2DE4C656A3D935646C67B788810C754754AA479829105CDB982A3C5B7F75CB101ABEE8C4041062A8B962D2CD9733643A14DB1299509A19069C2BEF8D2C9C9F3EAA44F9CD413A7D94C2F821854EA03FC330C126492344BCB53DB3D1161AEDE726F30DCFE63F500C26C110557E494816EE3F83263D2EECCE1E6834F2F271003111440C0C798F41648FC88FC2F102AB9475D28F9296EC45E25D6FD5E70CB72C3BF97EE604BF0BE95306DDBB41C178A57897918A672753B48B8F7FC76FE98BD706B2A5B48B57EA09F12237D1B04DDFC39ADF11FD44A0AF90EF33306C8E90E1FA14D0A74AA3D177EF67BAE3BC91B7AFCA8F42595F54E0A89CF00E80CDAA3F470C91E130EFD6C6126CC6A4F0A34886AAA8AB79CFEDCA1F2CF00D00308E902C64EA52BA4349F4EBFD1363F2BE06A6A120563C0F766793CC0502CD898FE3A81A26A40CEA823CA6332961ECF65D6134962CE37C350FC7AEC19AC51C9CA14EB443B0AA7187761E1174BF473ACC86AC8E3BD78B9291DA37CA11204470849B1CDC1FFFF32632073517E5CCF16D6004A3D03630799E2FDCD89500893D909B55DC18E42A481684268CFED2BEF3CEB9CAD184DC64077C49EF20210FE7A926B934EC6F3A1A08D892D04A13CD61E2785705C6353FC9DDCAB0BF017DC3333B694AFEC4290161AAE4CA6A7B2DD872B9BA1AF2B268DCC886367F5E169AB8F9DCD8B6646BE16A56FAA4E9AE062ED477FC621FDDF9242C4491BB3F77FDA7926949FE52FBD33E4D601704EBA9F951F4083A2C1AC2B3121A5B7C1EF396D21975A7BF490CD50F4543D1AF74805188D2A9F8FA936240B7764D26C36F724F003C50D175C6CD8424D1C59B18C7CD20AB6D68D041FC26FFC248FA7B0EB5939F0796CD18B3F71DED6016ECF9C7A7B6E7693AFDDBB19F1A4B52EDF54FD6B5A38E0A6BF1CB2EE867417C415086E4A55418049CD822EE57F5BA9859610E741BE8349F3698D28B4F3171CA0739DE2F17E1A0CBB7BD2E5B55F02D3C224ED56BC82CC947D4C7D771AF43EBD656197AA4D465B4D454F445F3836894DF4EAC7E217F0AA2588D086D283A0FF2412D211A43DF8ACC3DCDE3897C382B1FBBDD8DC469B4E1DDED6849F5DDF4234D759AC94A5007B4F76265BC8875392B532A014F89A310A53F15E42189D550A9F9882341B01B3C2A6150CBE2FB8B8C46F4E7117054B7F6788B48E1E0A9570D31B43B759E394E8171E0BB647B7B9004F0FF6AB5A98CCC2D3DBB26B86F8A7E76CED8FA00BD2B653B93AF7686663B094EB5A50FE1CA834AF29F6CB9B66A6DD55D55E455DFBA27844615B414491093264A94C18BFE2C32CDF09463BEFB028F3421968D8A20B590AF8E563D6CF4A70CADE4973F3B105B342F263522CF591BADF77768F51A7185AFEB21D1DEA316D37E137318156F5FCB0FC39628464B5673215C67F86BDFBB1B2CB713DBBD73E36F94E21097C51858D5553AFD1C5A28A18276E91455C1807E89C2B309AFEE0CDD080D7929603B709485F5AFD5742510E0C21BCE4303978523A1B8322B0AF267DDF4E9AEAC3307101DCCB760640C4F80EE18051E3531805EC7939E6CD6DB6CF54569728824464A1DEB4738D08382284ECDB068071A7312D203EF0C63B7723B76B0C3655888524DCDAE9E9C4FE041CF25335C97C85193153467B6029EC0CEEA3C7E1DADCC8CDDAFE395382A9D6303AAED719D779B8CD49BE9835090ABE1FCA574DA115E32C5F671BB6ED7AA4E6B40DFC644C3616310C3763AAA903CE0BCE4CF50890698D04350B2D9716B7545C2C79C2D04C69021B9D3EDA54A9F9520B428C49BFEDAEAC2E75C56EDA947E7A994E5BE84F34614B3AA13C9090BC77EF43E816504B5F74D3455BE97742194059435886EF4CCA2FE6267B00FBD4B1B7E0041EF60A974C53494CE01F633EB489C04B234F70D6DC276B0F9F26448AB3A6CACE6D9B492FDC7D44007A7F604DBCA488410C1F523A6BA92BB69391C47275C7D244BD106C629F97B57E6752E745D472EE1A083B0CDC15B17EE14BF9BB5B9EA011390D8C872CAC1863CF158010DD59C815B9B955F9270F2DB77C82023CC7DC687CA1C3E55F767F27AAF8F8FB172A59CF87CC9A58A941FE0137205A938F4D21F057C667556FD89665414AD80D04EE345A12BBD5402FE6C68A053FA47D1B59B6015C61332A36EFE1C8F7D15B74B1DB9A874FBE784A5CA6F23DAF212B2328C2FABE2E9DC3B5FF5F90FC0652B8A25F4D41E9C75A16A65019E6601122D0B4E235F5BD3F05A84D97EF37B3C650E79328F3F56DFFA994EE21339F45D63A6ED2CB38980B8809E9E2C7671B4E71A747C51C7F9B4E9544E5550308E70F367F31B13D7B0494AEB09179541D220023258E436515D3C271B123DD7846673747474DB6FE2165ED3D3DE3764743C2FDDDD5718E60D57CF415F7C218C00AA7B3BC2B271FD36E4AD61FB0DC9F3BCC15723B809B468BD92B053F731EB45C92473546FC1C8D86FCD0B679D79E5A2D96F600C2D1700C7C93F217F851A9E2D1D39064E7FD217DED93E0FF741506F40FDA9C1B516DB07899AFF9E929761EFB9B95815F2F488378004F40DA6B2B88702EF00BE1C9DE9FF71B304DE0385B92E6AA39C18042C623409BA4F6A345EEA9AA3C63153E619B347E36A9C08A1D4C61490C89F5BEFC2F4E278695342522BE019620264B99D10016EF3D26079F0915EAF59929367DA5CE29A5A4C57500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/SXWCPY+GTHaptikTrial-Regular cguidfix
/F1.1/SXWCPY+GTHaptikTrial-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 0 sc
q
87 0 m
135.04877 0 174 38.951225 174 87 c
174 135.04877 135.04877 174 87 174 c
38.951225 174 0 135.04877 0 87 c
0 38.951225 38.951225 0 87 0 c
h
W
0 0 174 174 rc
-5 179 m
179 179 l
179 -5 l
-5 -5 l
h
f
Q
0 0 0 sc
q
0 0 174 174 rc
0.72295308 -0.69089711 -0.69089711 -0.72295308 32.020943 49.832176 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 0 m
(!)s
0.89415449 -0.44775864 -0.44775864 -0.89415449 44.14938 38.239578 cm
0 0 m
(")s
0.98586625 -0.16753426 -0.16753426 -0.98586625 67.172531 26.714584 cm
0 0 m
(#)s
0.99996346 0.0085473005 0.0085473005 -0.99996346 82.959969 24.026379 cm
0 0 m
($)s
0.99065751 0.13637334 0.13637334 -0.99065751 92.291954 24.104923 cm
0 0 m
(%)s
0.96218067 0.27241212 0.27241212 -0.96218067 101.35309 25.351398 cm
0 0 m
(&)s
0.86096692 0.50866097 0.50866097 -0.86096692 111.5817 28.247833 cm
0 0 m
(")s
0.69224256 0.72166491 0.72166491 -0.69224256 133.77469 41.353378 cm
0 0 m
(!)s
0.76206392 0.64750183 0.64750183 -0.76206392 36.290222 111.92257 cm
0 0 m
(!)s
0.90442854 0.42662519 0.42662519 -0.90442854 47.096153 121.10516 cm
0 0 m
(")s
0.98349011 0.18096179 0.18096179 -0.98349011 68.088493 131.00577 cm
0 0 m
(#)s
0.99909478 0.042538919 0.042538919 -0.99909478 81.28891 133.43668 cm
0 0 m
($)s
0.99874043 -0.050175089 -0.050175089 -0.99874043 88.02375 133.72188 cm
0 0 m
(%)s
0.98833841 -0.15227337 -0.15227337 -0.98833841 94.552979 133.39354 cm
0 0 m
(&)s
0.93082869 -0.36545584 -0.36545584 -0.93082869 102.49527 132.16991 cm
0 0 m
(")s
0.80850649 -0.58848727 -0.58848727 -0.80850649 124.09545 123.69553 cm
0 0 m
(!)s
Q
q
64.916664 102.76565 m
62.769417 102.76565 61 101.01173 61 98.883293 c
61 74.295059 l
61 72.166626 62.769417 70.412704 64.916664 70.412704 c
104.08334 70.412704 l
106.23058 70.412704 108 72.166626 108 74.295059 c
108 98.883293 l
108 101.01173 106.23058 102.76565 104.08334 102.76565 c
64.916664 102.76565 l
h
64.916664 100.17741 m
104.08334 100.17741 l
104.82206 100.17741 105.37833 99.632248 105.38889 98.903519 c
84.5 84.304253 l
63.611111 98.903519 l
63.621674 99.632248 64.17794 100.17741 64.916664 100.17741 c
h
63.611111 95.749107 m
83.745224 81.655357 l
84.197418 81.337814 84.802582 81.337814 85.254776 81.655357 c
105.38889 95.749107 l
105.38889 74.295059 l
105.38889 73.555733 104.82919 73.000946 104.08334 73.000946 c
64.916664 73.000946 l
64.170807 73.000946 63.611111 73.555733 63.611111 74.295059 c
63.611111 95.749107 l
h
W
0 0 174 174 rc
56 107.76565 m
113 107.76565 l
113 65.412704 l
56 65.412704 l
h
f
ep
end
